CL-STRING-MATCH aims at providing robust implementations of string
matching algorithms. These algorithms are also called "substring
search" or "subsequence search" algorithms.

Corresponding article on Wikipedia is:

http://en.wikipedia.org/wiki/String_searching_algorithm

Currently it provides implementations of the following string matching
algorithms:

* Brute-force (also known as naïve algorithm)
* Boyer-Moore (with mismatched character heuristic)
* Boyer-Moore-Horspool algorithm
* Rabin-Karp algorithm
* Knuth-Morris-Pratt algorithm
* Aho-Corasick algorithm (with finite set of patterns)

Project home page:

http://sourceforge.net/projects/clstringmatch/

TODO
====

The project still lacks some important features and is under
development. Following tasks are still to be implemented:

* Comprehensive unit test suite: test if the functions in this package
  work properly

* Better replication of the SEARCH function parameters, implement
  search on generic sequences, not just on strings

* Improve performance: some implementations (i.e. Aho-Corasick) are
  extremely slow compared with theoretical boundaries.

* Benchmark should include corner cases (general worst-case scenarios)
  and also check correlation between needle and haystack sizes

* Finite-State automaton algorithm

* Commentz-Walter algorithm

Algorithms with finite set of patterns:

* Commentz-Walter algorithm

* Rabin–Karp string search algorithm

Additional algorithms:

* Suffix tree and tree-based algorithms


;; EOF